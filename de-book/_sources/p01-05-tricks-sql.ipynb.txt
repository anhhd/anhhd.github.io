{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mẹo với SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Kiểm tra kiểu dữ liệu trong bảng"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "source": [
    "```sql\n",
    "SELECT COLUMN_NAME, DATA_TYPE \n",
    "FROM INFORMATION_SCHEMA.COLUMNS \n",
    "WHERE TABLE_NAME = 'ACCOUNT' -- Điền tên bảng\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Dữ liệu bị collate\n",
    "\n",
    "- Khi làm việc, dữ liệu các bảng có thể bị convert định dạng khác nhau. Trong trường hợp này, phải dùng `COLLATE DATABASE_DEFAULT`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "select top 10 * from \n",
    "INFORMATION_SCHEMA.columns\n",
    "where table_name COLLATE DATABASE_DEFAULT in (select new_table COLLATE DATABASE_DEFAULT \n",
    "from table_rename\n",
    ")\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop nhiều bảng theo điều kiện\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "declare @string nvarchar(max) \n",
    "SET @STRING = ''\n",
    "SELECT @STRING = @STRING + 'DROP TABLE ANALYTICS.DBO.' + TABLE_NAME + ';' \n",
    "FROM ANALYTICS.INFORMATION_SCHEMA.TABLES \n",
    "WHERE TABLE_NAME like 'Mckinsey%'\n",
    "exec (@string)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Auto Wrap in MSSQL\n",
    "\n",
    "Tools >> Options >> Text Editor >> Transact SQL >> General >> WordWrap\n",
    "\n",
    "## Format định dạng thêm ký tự 00 trước số\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "select FORMAT(01,'00#') as index\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Kiểm tra định dạng dữ liệu một bảng\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "-- Với Link server\n",
    "select * from ANHNT67.DATA.INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='CARD_LIVE'\n",
    "\n",
    "-- Với Local\n",
    "select * from COLUMNS where TABLE_NAME='CARD_LIVE'\n",
    "\n",
    "-- Kiểm tra toàn bộ thông tin\n",
    "sp_help table_name \n",
    "sp_help CARD_LIVE\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert từ tiếng Việt có dấu sang không dấu\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "CREATE FUNCTION [dbo].[fChuyenCoDauThanhKhongDau](@inputVar NVARCHAR(MAX) )\n",
    "RETURNS NVARCHAR(MAX)\n",
    "AS\n",
    "BEGIN    \n",
    "    IF (@inputVar IS NULL OR @inputVar = '')  RETURN ''\n",
    "   \n",
    "    DECLARE @RT NVARCHAR(MAX)\n",
    "    DECLARE @SIGN_CHARS NCHAR(256)\n",
    "    DECLARE @UNSIGN_CHARS NCHAR (256)\n",
    "\n",
    "    SET @SIGN_CHARS = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệếìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵýĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ' + NCHAR(272) + NCHAR(208)\n",
    "    SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeeeiiiiiooooooooooooooouuuuuuuuuuyyyyyAADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD'\n",
    "\n",
    "    DECLARE @COUNTER int\n",
    "    DECLARE @COUNTER1 int\n",
    "   \n",
    "    SET @COUNTER = 1\n",
    "    WHILE (@COUNTER <= LEN(@inputVar))\n",
    "    BEGIN  \n",
    "        SET @COUNTER1 = 1\n",
    "        WHILE (@COUNTER1 <= LEN(@SIGN_CHARS) + 1)\n",
    "        BEGIN\n",
    "            IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1)) = UNICODE(SUBSTRING(@inputVar,@COUNTER ,1))\n",
    "            BEGIN          \n",
    "                IF @COUNTER = 1\n",
    "                    SET @inputVar = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@inputVar, @COUNTER+1,LEN(@inputVar)-1)      \n",
    "                ELSE\n",
    "                    SET @inputVar = SUBSTRING(@inputVar, 1, @COUNTER-1) +SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@inputVar, @COUNTER+1,LEN(@inputVar)- @COUNTER)\n",
    "                BREAK\n",
    "            END\n",
    "            SET @COUNTER1 = @COUNTER1 +1\n",
    "        END\n",
    "        SET @COUNTER = @COUNTER +1\n",
    "    END\n",
    "    -- SET @inputVar = replace(@inputVar,' ','-')\n",
    "    RETURN @inputVar\n",
    "END\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Ví dụ\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "select dbo.fChuyenCoDauThanhKhongDau(N'Một thiên thần') \n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions chọn giá trị lớn hơn\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Function lấy giá trị lớn hơn\n",
    "Author:         TrangTQ2\n",
    "Created date:   20190301\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description: Tạo fuction lấy giá trị lớn hơn trong 2 số\n",
    "\n",
    "*********************************/\n",
    "\n",
    "create function [dbo].[GREATER](@val1 FLOAT, @val2 FLOAT)\n",
    "returns FLOAT\n",
    "as\n",
    "begin\n",
    "  if @val1 > @val2\n",
    "    return @val1\n",
    "  return isnull(@val2,@val1)\n",
    "end\n",
    "GO\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Procedure pivot vs. unpivot\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Procedure pivot và unpivot\n",
    "Author:         TrangTQ2\n",
    "Created date:   20190301\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description: Tạo procedure pivot và unpivot trong SQL với concept giống dcast và melt trong R\n",
    "\n",
    "*********************************/\n",
    "\n",
    "---------------------------------------------------------CREATE DATA TO TEST---------------------------------------------------\n",
    "\n",
    "create table ##student_wide\n",
    "(\n",
    "id int,\n",
    "mark1 float,\n",
    "mark2 float,\n",
    "mark3 float\n",
    ")\n",
    "\n",
    "insert into ##student_wide values (1, 1,2,3)\n",
    "insert into ##student_wide values (2, 5,6,7)\n",
    "insert into ##student_wide values (3, 7,4,2)\n",
    "\n",
    "select * from ##student_wide\n",
    "\n",
    "SELECT * \n",
    "into ##student_long FROM\n",
    "(SELECT *\n",
    "FROM ##student_wide) a\n",
    "UNPIVOT\n",
    "(value_var FOR group_var IN ([mark1], [mark2], [mark3])\n",
    ") b\n",
    "\n",
    "select * from ##student_long\n",
    "\n",
    "select * from \n",
    "(select * from ##student_long) a\n",
    "pivot \n",
    "(sum(value_var) for group_var in ([mark1], [mark2], [mark3])) b\n",
    "\n",
    "---------------------------------------------------CREATE PROCEDURE TO PIVOT---------------------------------------------\n",
    "\n",
    "--drop procedure if exists sql_pivot\n",
    "create procedure sql_pivot  @data nvarchar(max),\n",
    "                            @group nvarchar(max), -- Variable to pivot\n",
    "                            @row nvarchar(max), -- Column to keep as key\n",
    "                            @value nvarchar(max), -- Column to calculate\n",
    "                            @function nvarchar(max) = 'sum', -- Function to calculate\n",
    "                            @stored_data nvarchar(max) = '##pivot_result' -- Store data result\n",
    "as\n",
    "begin\n",
    "declare @sql nvarchar(max)\n",
    "set @sql = '\n",
    "declare @group_value nvarchar(max)\n",
    "set @group_value = STUFF(\n",
    "(SELECT '','' + ''['' + b.'+@group+' + '']''\n",
    "              FROM \n",
    "              (select distinct '+ @group +' from '+ @data +') b\n",
    "              FOR XML PATH ('''')),1,1,'''')\n",
    "\n",
    "declare @sqlstr nvarchar(max)\n",
    "set @sqlstr = N''\n",
    "drop table if exists '+ @stored_data +'\n",
    "select * \n",
    "into '+ @stored_data +'\n",
    "from \n",
    "(select '+ @group+ ', ' + @row + ', '+@value +'  from '+ @data +') a\n",
    "pivot \n",
    "('+@function+'('+ @value +') for '+@group+' in ('' + @group_value + '')) b\n",
    "''\n",
    "exec sp_executesql @sqlstr\n",
    "'\n",
    "exec sp_executesql @sql\n",
    "end;\n",
    "\n",
    "\n",
    "sql_pivot @data = '##student_long', \n",
    "          @row = 'id',\n",
    "          @group= 'group_var', \n",
    "          @value = 'value_var', \n",
    "          @function = 'sum',\n",
    "          @stored_data = '##student_wide2'\n",
    "\n",
    "select * from ##student_long\n",
    "select * from ##pivot_result\n",
    "select * from ##student_wide2\n",
    "\n",
    "---------------------------------------------------CREATE PROCEDURE TO UNPIVOT---------------------------------------------\n",
    "\n",
    "--drop procedure if exists sql_unpivot\n",
    "create procedure sql_unpivot \n",
    " @db nvarchar(max) = 'tempdb', --Database contains data\n",
    "@data nvarchar(max), -- Name of data\n",
    "@id_var nvarchar(max), -- Key variables\n",
    "@group_var nvarchar(max) = 'group_var', --Name of groups variable\n",
    "@value_var nvarchar(max) = 'value_var', -- Name of value variable\n",
    "@stored_data nvarchar(max) = '##unpivot_result'  -- Data storage\n",
    "as \n",
    "begin\n",
    "declare @sql nvarchar(max) \n",
    "set @sql = N'\n",
    "drop table if exists ##all_cols\n",
    "select name into ##all_cols\n",
    "from '+@db+'.sys.columns \n",
    "where object_id in (select object_id from '+@db+'.sys.tables where name like ''%'+@data+''')\n",
    "\n",
    "declare @cols AS NVARCHAR(MAX)\n",
    "   select @cols = STUFF((SELECT '','' + QUOTENAME(name) \n",
    "                    FROM (\n",
    "                        select name from ##all_cols \n",
    "                        where name not in ('+@id_var+') \n",
    "                        ) cols            \n",
    "                    FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''),1,1,'''')\n",
    "-- Show columns\n",
    "print @cols \n",
    "\n",
    "declare @key AS NVARCHAR(MAX)\n",
    "   select @key = STUFF((SELECT '','' + QUOTENAME(name) \n",
    "                    FROM (\n",
    "                        select name from ##all_cols \n",
    "                        where name in ('+@id_var+') \n",
    "                        ) cols            \n",
    "                    FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''),1,1,'''')\n",
    "-- Show key\n",
    "print @key \n",
    "\n",
    "--Run procedure\n",
    "\n",
    "declare @sqlstr nvarchar(max)\n",
    "set @sqlstr = N''\n",
    "            drop table if exists '+@stored_data+'\n",
    "            select ''+@key+'', '+@group_var+', '+@value_var+'\n",
    "            into '+@stored_data+'\n",
    "            from(\n",
    "               select *\n",
    "               from '+@db+'.dbo.['+@data+']\n",
    "            ) as a\n",
    "            unpivot\n",
    "            (\n",
    "              '+@value_var+' for '+@group_var+' in ('' + @cols + '')\n",
    "            ) as b\n",
    "            select * from '+@stored_data+'\n",
    "            ''\n",
    "print @sqlstr\n",
    "exec sp_executesql @sqlstr\n",
    "'\n",
    "exec sp_executesql @sql\n",
    "end\n",
    "\n",
    "sql_unpivot @db = 'tempdb', \n",
    "          @data = '##student_wide', \n",
    "          @id_var = '''id''',  --> neu muon giu nhieu cot thi viet '''id'',''mark1'''\n",
    "          @stored_data = '##unpivot_result', \n",
    "          @group_var = 'group_mark'\n",
    "\n",
    "select * from ##student_wide\n",
    "select * from ##unpivot_result\n",
    "select * from ##student_long\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Đổi tên bảng và tên cột\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Đổi tên bảng và cột\n",
    "Author:         TrangTQ2\n",
    "Created date:   20190301\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description:\n",
    "\n",
    "*********************************/\n",
    "\n",
    "drop table ##test\n",
    "drop table draft.dbo.test\n",
    "drop table draft.dbo.test2\n",
    "\n",
    "select top 10 * into ##test from m74.bicdata.dbo.customer\n",
    "select top 10 * into draft.dbo.test from m74.bicdata.dbo.customer\n",
    "\n",
    "select * from ##test\n",
    "select * from draft.dbo.test2\n",
    "\n",
    "-- Đổi tên bảng (không đổi được tên bảng tạm)\n",
    "\n",
    "use DBS_REGULAR\n",
    "go\n",
    "sp_rename 'PCB_UPLTOPUP_FULL_201806','PCB_UPLTOPUP_FULL'\n",
    "go\n",
    "\n",
    "-- Đổi tên cột \n",
    "use DBS_ADHOC\n",
    "go\n",
    "sp_rename 'EBANKING_TRANSACTION_2017.TRANS_TYPE','TYPE','column'\n",
    "--tempdb.sys.sp_rename '##test.RECID','CIF','column'\n",
    "go\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Viết hoa chữ đầu\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Function viết hoa chữ đầu\n",
    "Author:         TrangTQ2\n",
    "Created date:   20190301\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description: Tạo function viết hoa chữ cái đầu\n",
    "\n",
    "*********************************/\n",
    "\n",
    "CREATE FUNCTION dbo.fn_capitalize\n",
    "(\n",
    "@str AS nvarchar(100)\n",
    ")\n",
    "RETURNS nvarchar(100)\n",
    "AS\n",
    "BEGIN\n",
    "\n",
    "DECLARE\n",
    "@ret_str AS varchar(100),\n",
    "@pos AS int,\n",
    "@len AS int\n",
    "\n",
    "SELECT\n",
    "@ret_str = N' ' + LOWER(@str),\n",
    "@pos = 1,\n",
    "@len = LEN(@str) + 1\n",
    "\n",
    "WHILE @pos > 0 AND @pos < @len\n",
    "BEGIN\n",
    "SET @ret_str = STUFF(@ret_str,\n",
    "@pos + 1,\n",
    "1,\n",
    "UPPER(SUBSTRING(@ret_str,@pos + 1, 1)))\n",
    "SET @pos = CHARINDEX(N' ', @ret_str, @pos + 1)\n",
    "END\n",
    "\n",
    "RETURN RIGHT(@ret_str, @len - 1)\n",
    "\n",
    "END\n",
    "\n",
    "------\n",
    "SELECT dbo.fn_capitalize('Average Spending per Transaction')\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tạo floor date\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Floor Date trong SQL\n",
    "Author:         AnhHD3\n",
    "Created date:   20190412\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description:  Hàm cho phép lấy nhanh ngày đầu tiên \n",
    "của tháng, năm, cho phép tính toán và nhóm theo month/year\n",
    "*********************************/\n",
    "\n",
    "IF OBJECT_ID('fn_FloorDate') IS NOT NULL DROP FUNCTION fn_FloorDate\n",
    "SET ANSI_NULLS OFF\n",
    "GO\n",
    "SET QUOTED_IDENTIFIER ON\n",
    "GO\n",
    "CREATE FUNCTION [dbo].[fn_FloorDate] (\n",
    "  @Date DATETIME = NULL,\n",
    "  @DatePart VARCHAR(6) = 'day'\n",
    ")\n",
    "RETURNS DATETIME\n",
    "AS\n",
    "BEGIN\n",
    "  IF (@Date IS NULL)\n",
    "    SET @Date = GETDATE();\n",
    "\n",
    "  RETURN\n",
    "  CASE\n",
    "    WHEN LOWER(@DatePart) = 'year' THEN DATEADD(YEAR, DATEDIFF(YEAR, 0, @Date), 0)\n",
    "    WHEN LOWER(@DatePart) = 'month' THEN DATEADD(MONTH, DATEDIFF(MONTH, 0, @Date), 0)\n",
    "    WHEN LOWER(@DatePart) = 'day' THEN DATEADD(DAY, DATEDIFF(DAY, 0, @Date), 0)\n",
    "    WHEN LOWER(@DatePart) = 'hour' THEN DATEADD(HOUR, DATEDIFF(HOUR, 0, @Date), 0)\n",
    "    WHEN LOWER(@DatePart) = 'minute' THEN DATEADD(MINUTE, DATEDIFF(MINUTE, 0, @Date), 0)\n",
    "    WHEN LOWER(@DatePart) = 'second' THEN DATEADD(SECOND, DATEDIFF(SECOND, '2000-01-01', @Date), '2000-01-01')\n",
    "    ELSE DATEADD(DAY, DATEDIFF(DAY, 0, @Date), 0)\n",
    "  END;\n",
    "END\n",
    "\n",
    "-- Example\n",
    "\n",
    "select getdate() , dbo.fn_FloorDate(getdate(), 'month')\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean city\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:         Function clean city\n",
    "Author:         Hoangnb3\n",
    "Created date:   20190426\n",
    "Modifed date:   \n",
    "========================================\n",
    "Description: Tạo function làm sạch dữ liệu tỉnh/thành phố trực thuộc trung ương\n",
    "\n",
    "Note: Sử dụng sau khi đã dùng function chuyển sang không dấu\n",
    "\n",
    "*********************************/\n",
    "\n",
    "USE [master]\n",
    "GO\n",
    "\n",
    "SET ANSI_NULLS ON\n",
    "GO\n",
    "SET QUOTED_IDENTIFIER ON\n",
    "GO\n",
    "\n",
    "ALTER FUNCTION [dbo].[fn_cleancity](@inputVar NVARCHAR(MAX) )\n",
    "returns nvarchar(max)\n",
    "as\n",
    "begin\n",
    "    declare @city_new nvarchar(max)\n",
    "\n",
    "    set @city_new = CASE WHEN @inputVar like '%ha%no%' or @inputVar like '%ha%n%i%' or @inputVar like '%ha dong%'\n",
    "                            or @inputVar like '%hn%' or @inputVar like '%hn' or @inputVar = 'hn'\n",
    "                            or @inputVar like '%h anoi%' or @inputVar like '%hanoi%' or @inputVar like '%ha n oi%'\n",
    "                            or @inputVar like '%ha ná»i%' or @inputVar like '%ha nnoi%' or @inputVar like '%ha no%'\n",
    "                            or @inputVar like '%ha npoi%' or @inputVar like '%ha tay%' or @inputVar like '%hã  ná»?i%'\n",
    "                            or @inputVar like '%hã¡ noi%' or @inputVar like '%ba vi%' or @inputVar like '%gia lam%'\n",
    "                            or @inputVar like '%ha hoi%' or @inputVar like '%hoan kiem%' or @inputVar like '%Van Chuong%'\n",
    "                            or @inputVar like '%Trung Kinh%' or @inputVar like '%Trung Hoa%' or @inputVar like '%Quoc Oai%'\n",
    "                            or @inputVar like '%Van Dien%' or @inputVar like '%Thach That%' or @inputVar like '%Cau Giay%'\n",
    "                            or @inputVar like '%Hoang Mai%' or @inputVar like '%Phu Do%' or @inputVar like '%Me Linh%'\n",
    "                            or @inputVar like '%Ba Dinh%'\n",
    "                            or @inputVar like '%Quoc Oai%' THEN 'ha noi'\n",
    "                        WHEN @inputVar like '%chi%minh%' or @inputVar like '%hcm%' or @inputVar like '%quan 1%'\n",
    "                            or @inputVar like '%há»? chã­ minh%' or @inputVar like '%tp h cm%' or @inputVar like '%tan phu%'\n",
    "                            or @inputVar like '%thu duc%' or @inputVar like '%go vap%' or @inputVar like '%Tan Binh%'\n",
    "                            or @inputVar like '%Chi Hoa%' or @inputVar like '%Hoc Mon%' or @inputVar like '%Tan Thuan Dong%'\n",
    "                            or @inputVar like '%Binh Hung Hoa%' or @inputVar like '%Ap Sai Gon%' or @inputVar like '%Cu Chi%'\n",
    "                            or @inputVar like '%Phu Nhuan%' or @inputVar like '%Binh Tan%' or @inputVar like '%Nha Be%'\n",
    "                            or @inputVar like '%Linh Xuan%'\n",
    "                            or @inputVar like '%Trung My Tay%' THEN 'ho chi minh'\n",
    "                        WHEN @inputVar like '%quang%ninh%' or @inputVar like '%mong cai%' or @inputVar like '%quag ninh%'\n",
    "                            or @inputVar like '%ha long%' or @inputVar like '%dong trieu%' or @inputVar like '%Van Don%'\n",
    "                            or @inputVar like '%Quang Yen%' or @inputVar like '%Q%Ninh%' or @inputVar like '%Tien Yen%'\n",
    "                            or @inputVar like '%Hoanh Bo%'\n",
    "                            or @inputVar like '%cam pha%' THEN 'quang ninh'\n",
    "                        WHEN @inputVar like '%quang binh%' or @inputVar like '%quangb binh%' or @inputVar like '%q%binh%' \n",
    "                            or @inputVar like '%Hoan Lao%' or @inputVar like '%Dong Hoi%'\n",
    "                            or @inputVar like '%qbinh%' THEN 'quang binh'\n",
    "                        WHEN @inputVar like '%quang tri%' or @inputVar like '%quangtri%' or @inputVar like '%q%tr%'\n",
    "                            or @inputVar like '%quáº£ng tri%' or @inputVar like '%Trieu Phong%' or @inputVar like '%Ho Xa%'\n",
    "                            or @inputVar like '%Dong Ha%' THEN 'quang tri'\n",
    "                        WHEN @inputVar like '%hue%' or @inputVar like '%Phu Loc%'\n",
    "                            or @inputVar like '%th%hu%' THEN 'hue'\n",
    "                        WHEN @inputVar like '%tien giang%' or @inputVar like '%t%giang%' or @inputVar like '%My Tho%'\n",
    "                            or @inputVar like '%Cai Be%' or @inputVar like '%Go Cong%'\n",
    "                            or @inputVar like '%tiá»n giang%' THEN 'tien giang'\n",
    "                        WHEN @inputVar like '%b%tre%' or @inputVar like '%Mo Cay%' or @inputVar like '%Giong Trom%'\n",
    "                            or @inputVar like '%ben tre%' THEN 'ben tre'\n",
    "                        WHEN @inputVar like '%ca mau%' THEN 'ca mau'\n",
    "                        WHEN @inputVar like '%binh phuoc%' or @inputVar like '%Dong Xoai%' or @inputVar like '%Binh Long%'\n",
    "                            or @inputVar like '%Loc Ninh%'\n",
    "                            or @inputVar like '%binh%ph%' THEN 'binh phuoc'\n",
    "                        WHEN @inputVar like '%binh dinh%' or @inputVar like '%binh%d%' or @inputVar like '%An Nhon%'\n",
    "                            or @inputVar like '%Bong Son%'\n",
    "                            or @inputVar like '%Qu%Nhon%' THEN 'binh dinh'\n",
    "                        WHEN @inputVar like '%phu tho%' or @inputVar like '%phutho%' or @inputVar like '%phu%th%'\n",
    "                            or @inputVar like '%Cam Khe%'\n",
    "                            or @inputVar like '%viet tri%' THEN 'phu tho'\n",
    "                        WHEN @inputVar like '%an%giang%' or @inputVar like '%An Phu%' or @inputVar like '%Tan Chau%'\n",
    "                            or @inputVar like '%Long Xuyen%' THEN 'an giang'\n",
    "                        WHEN @inputVar like '%yen bai%'\n",
    "                            or @inputVar like '%Yen Binh%' THEN 'yen bai'\n",
    "                        WHEN @inputVar like '%son la%'\n",
    "                            or @inputVar like '%Moc Chau%' THEN 'son la'\n",
    "                        WHEN @inputVar like '%tay ninh%' or @inputVar like '%Ben Cau%'\n",
    "                            or @inputVar like '%Trang Bang%' THEN 'tay ninh'\n",
    "                        WHEN @inputVar like '%vung%tau%' or @inputVar = 'ba ria- vå©ng tã u' or @inputVar like '%Ba Ria%'\n",
    "                            or @inputVar like '%Xuyen Moc%' THEN 'vung tau'\n",
    "                        WHEN @inputVar like '%bac can%' or @inputVar like '%b%c%c%n%' or @inputVar like '%b%c%k%n%'\n",
    "                            or @inputVar like '%bac kan%' THEN 'bac can'\n",
    "                        WHEN @inputVar like '%b%lieu%'\n",
    "                            or @inputVar like '%Gia Rai%' THEN 'bac lieu'\n",
    "                        WHEN @inputVar like '%bac ninh%' or @inputVar like '%b%ninh%' or @inputVar like '%yen trung%'\n",
    "                            or @inputVar like '%Tu Son%' or @inputVar like '%Gia Binh%'\n",
    "                            or @inputVar like '%Thuan Thanh%' THEN 'bac ninh'\n",
    "                        WHEN @inputVar like '%binh duong%' or @inputVar like '%Thuan An%' or @inputVar like '%Tan Uyen%'\n",
    "                            or @inputVar like '%Ben Cat%'\n",
    "                            or @inputVar like '%Thu Dau Mot%' THEN 'binh duong'\n",
    "                        WHEN @inputVar like '%ha nam%' or @inputVar like '%Ly Nhan%' or @inputVar like '%Kim Bang%'\n",
    "                            or @inputVar like '%Phu%L%' THEN 'ha nam'\n",
    "                        WHEN @inputVar like '%binh thuan%' or @inputVar like '%phan thiet%' or @inputVar like '%binh%th%'\n",
    "                            or @inputVar like '%Duc Linh%'\n",
    "                            or @inputVar = 'phãº thá»' THEN 'binh thuan'\n",
    "                        WHEN @inputVar like '%can tho%' or @inputVar like '%c%tho%' or @inputVar like '%Phong Dien%'\n",
    "                            or @inputVar like '%Xuan Khanh%' THEN 'can tho'\n",
    "                        WHEN @inputVar like '%hau giang%' or @inputVar like '%h%giang%' or @inputVar like '%Phung Hiep%'\n",
    "                            or @inputVar like '%Rach Goi%'\n",
    "                            or @inputVar like '%Vi Thanh%' THEN 'hau giang'\n",
    "                        WHEN @inputVar like '%tuyen quang%' or @inputVar like '%Chiem Hoa%'\n",
    "                            or @inputVar like '%tuyãªn quang%' THEN 'tuyen quang'\n",
    "                        WHEN @inputVar like '%thai nguyen%' or @inputVar like '%Phu Dinh%'\n",
    "                            or @inputVar like '%thainguyen%' THEN 'thai nguyen'\n",
    "                        WHEN @inputVar like '%thai binh%' or @inputVar like '%Hung Ha%' or @inputVar like '%Tien Hai%'\n",
    "                            or @inputVar like '%thai bã¬nh%' THEN 'thai binh'\n",
    "                        WHEN @inputVar like '%hai phong%' or @inputVar like '%h%ph%' or @inputVar like '%An Bien%'\n",
    "                            or @inputVar like '%Kien An%'\n",
    "                            or @inputVar like '%hp%' THEN 'hai phong'\n",
    "                        WHEN @inputVar like '%da nang%' or @inputVar like '%da%n%' or @inputVar = 'da nã¢ng' \n",
    "                            or @inputVar like '%d%nang%' or @inputVar like '%Lien Chieu%' or @inputVar like '%Hai Chau%'\n",
    "                            or @inputVar like '%Son Tra%' or @inputVar like '%Cam Le%' or @inputVar like '%Hoa Vang%'\n",
    "                            or @inputVar = 'cam ranh' THEN 'da nang'\n",
    "                        WHEN @inputVar like '%dac lac%' or @inputVar like '%d%c%l%c%' or @inputVar like '%dak dak%'\n",
    "                            or @inputVar like '%dak lak%' or @inputVar like '%dakalk%' or @inputVar like '%dakalk%'\n",
    "                            or @inputVar like '%daklak%' or @inputVar like '%dallak%' or @inputVar like '%buon ma thuot%'\n",
    "                            or @inputVar like '%Ban Me Thuot%'\n",
    "                            or @inputVar like '%Buon Don%' THEN 'dac lac'\n",
    "                        WHEN @inputVar like '%dac nong%' or @inputVar like '%d%nong%' or @inputVar like '%Gia Nghia%'\n",
    "                            OR @inputVar like '%dak nong%' THEN 'dac nong'\n",
    "                        WHEN @inputVar like '%bac giang%' or @inputVar like '%b%giang%' or @inputVar like '%yen the%'\n",
    "                            or @inputVar like '%Hiep Hoa%'\n",
    "                            or @inputVar like '%Viet Yen%' THEN 'bac giang'\n",
    "                        WHEN @inputVar like '%bac ninh%' or @inputVar like '%Yen Phong%' or @inputVar like '%Luong Tai%'\n",
    "                            or @inputVar like '%ban ninh%' THEN 'bac ninh'\n",
    "                        WHEN @inputVar like '%dong nai%' or @inputVar like '%d%nai%' or @inputVar like '%Long Thanh%'\n",
    "                            or @inputVar like '%Long Khanh%' or @inputVar like '%Ho Nai%'\n",
    "                            or @inputVar like '%Bien Hoa%' THEN 'dong nai'\n",
    "                        WHEN @inputVar like '%vinh long%' or @inputVar like '%Tra On%'\n",
    "                            OR @inputVar like '%vfinh long%' THEN 'vinh long'\n",
    "                        WHEN @inputVar like '%lai chau%' THEN 'lai chau'\n",
    "                        WHEN @inputVar like '%lam dong%' or @inputVar like '%lam%d%' or @inputVar like '%Bao Loc%'\n",
    "                            or @inputVar like '%Da Lat%' THEN 'lam dong'\n",
    "                        WHEN @inputVar like '%lang son%' or @inputVar like '%l%son%' or @inputVar like '%Van Linh%'\n",
    "                            or @inputVar like '%Xuan Tinh%' THEN 'lang son'\n",
    "                        WHEN @inputVar like '%lao cai%' THEN 'lao cai'\n",
    "                        WHEN @inputVar like '%dong nai%'\n",
    "                            or @inputVar like '%Xuan Loc%' THEN 'dong nai'\n",
    "                        WHEN @inputVar like '%tay ninh%'\n",
    "                            or @inputVar like '%Phuoc Dong%' THEN 'tay ninh'\n",
    "                        WHEN @inputVar like '%ninh binh%' THEN 'ninh binh'\n",
    "                        WHEN @inputVar like '%ha giang%'\n",
    "                            or @inputVar like '%ha ginag%' THEN 'ha giang'\n",
    "                        WHEN @inputVar like '%thanh hoa%' or @inputVar like '%thanh oai%' or @inputVar like '%thanh ho%'\n",
    "                            or @inputVar like '%Yen Dinh%' or @inputVar like '%Bim Son%' or @inputVar like '%Nong Cong%'\n",
    "                            or @inputVar like '%Tho Xuan%'\n",
    "                            or @inputVar like '%Quang Xuong%' THEN 'thanh hoa'\n",
    "                        WHEN @inputVar like '%tra%vinh%' or @inputVar like '%Tieu Can%'\n",
    "                            or @inputVar like '%Duyen Hai%' THEN 'tra vinh'\n",
    "                        WHEN @inputVar like '%ha tinh%' or @inputVar like '%ha ti nh%' or @inputVar like '%ha tin%'\n",
    "                            or @inputVar like '%hã¡ tinh%'\n",
    "                            or @inputVar like '%hat inh%' THEN 'ha tinh'\n",
    "                        WHEN @inputVar like '%nghe an%' or @inputVar like '%nghá»? an%' or @inputVar like '%vinh%'\n",
    "                            or @inputVar like '%Ngh%an%' or @inputVar like '%Dien Chau%' or @inputVar like '%Quynh Luu%'\n",
    "                            or @inputVar like '%Do Luong%' or @inputVar like '%Minh Son%'\n",
    "                            or @inputVar like '%Yen Thanh%' THEN 'nghe an'\n",
    "                        WHEN @inputVar like '%nam dinh%' or @inputVar like '%nam dinnh%' or @inputVar like '%nam%d%'\n",
    "                            or @inputVar like '%Vu Ban%'\n",
    "                            or @inputVar like '%yen thang%' THEN 'nam dinh'\n",
    "                        WHEN @inputVar like '%hai duong%' or @inputVar like '%Kinh Mon%' or @inputVar like '%Cam Giang%'\n",
    "                            or @inputVar like '%h%duong%' THEN 'hai duong'\n",
    "                        WHEN @inputVar like '%hoa binh%'\n",
    "                            or @inputVar like '%hoabinh%' THEN 'hoa binh'\n",
    "                        WHEN @inputVar like '%hung yen%' or @inputVar like '%Yen My%' or @inputVar like '%Khoai Chau%'\n",
    "                            or @inputVar like '%Tien Lu%'\n",
    "                            or @inputVar like '%Van Lam%' THEN 'hung yen'\n",
    "                        WHEN @inputVar like '%kien giang%' or @inputVar like '%Rach Gia%' or @inputVar like '%Duong Dong%'\n",
    "                            or @inputVar like '%phu quoc%'\n",
    "                            or @inputVar like '%kie giang%' THEN 'kien giang'\n",
    "                        WHEN @inputVar like '%kon tum%'\n",
    "                            or @inputVar like '%kom tum%' THEN 'kon tum'\n",
    "                        WHEN @inputVar like '%khanh hoa%' or @inputVar like '%khanh hioa%' or @inputVar like '%nha trang%'\n",
    "                            or @inputVar like '%Cam Lam%' or @inputVar like '%Ninh Hoa%'\n",
    "                            or @inputVar like '%Dien Khanh%' THEN 'khanh hoa'\n",
    "                        WHEN @inputVar like '%vinh phuc%' OR @inputVar like '%phuc yen%'\n",
    "                            OR @inputVar like '%Yen Lac%' THEN 'vinh phuc'\n",
    "                        WHEN @inputVar like '%long an%' or @inputVar like '%lon gan%' or @inputVar like '%Tan Tru%'\n",
    "                            or @inputVar like '%Tan An%' or @inputVar like '%Ben Luc%' or @inputVar like '%Can Giuoc%'\n",
    "                            or @inputVar like '%Can Duoc%' or @inputVar like '%An Thanh%' or @inputVar like '%Tan Hung%'\n",
    "                            or @inputVar like '%Moc Hoa%'\n",
    "                            or @inputVar like '%lon gan%' THEN 'long an'\n",
    "                        WHEN @inputVar like '%dong nai%'\n",
    "                            or @inputVar like '%Dinh Quan%' THEN 'dong nai'\n",
    "                        WHEN @inputVar like '%ninh binh%'\n",
    "                            or @inputVar like '%ninhbinh%' THEN 'ninh binh'\n",
    "                        WHEN @inputVar like '%ninh%th%'\n",
    "                            or @inputVar like '%Phan Rang%' THEN 'ninh thuan'\n",
    "                        WHEN @inputVar like '%soc trang%' THEN 'soc trang'\n",
    "                        WHEN @inputVar like '%phu yen%' or @inputVar like '%Tay Hoa%'\n",
    "                            or @inputVar like '%Tuy Hoa%' THEN 'phu yen'\n",
    "                        WHEN @inputVar like '%cao%b%' THEN 'cao bang'\n",
    "                        WHEN @inputVar like '%d%bien%' THEN 'dien bien'\n",
    "                        WHEN @inputVar like '%dong thap%' or @inputVar like '%Cao Lanh%' or @inputVar like '%Hong Ngu%'\n",
    "                            or @inputVar like '%Sa Dec%'\n",
    "                            or @inputVar like '%d%thap%' THEN 'dong thap'\n",
    "                        WHEN @inputVar like '%gia lai%' or @inputVar like '%Phu Tuc%' or @inputVar like '%Chu Se%'\n",
    "                            or @inputVar like '%Pleiku%' THEN 'gia lai'\n",
    "                        WHEN @inputVar like '%Q%Nam%' or @inputVar like '%Tam Ky%' or @inputVar like '%Duy Xuyen%'\n",
    "                            or @inputVar like '%Hoi An%' THEN 'quang nam'\n",
    "                        WHEN @inputVar like '%Q%Ngai%' THEN 'quang ngai'\n",
    "                        ELSE 'Others'\n",
    "                        END\n",
    "    \n",
    "    return @city_new\n",
    "end\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Kiểm tra chất lượng dữ liệu hàng ngày\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script: Tạo bảng kiểm tra chất lượng dữ liệu (nrow) hàng ngày\n",
    "Author:         AnhHD3\n",
    "Created date:   20180701\n",
    "========================================\n",
    "Step 1: Sửa tên Database cho phù hợp\n",
    "Step 2: Run hoặc tạo job hàng ngày\n",
    "*/\n",
    "\n",
    "-- Step 1: Tạo bảng TABLE_QUALITY\n",
    "\n",
    "create table DATA.dbo.TABLE_QUALITY\n",
    "(\n",
    "TABLE_NAME nvarchar(100), \n",
    "N_ROW int)\n",
    "\n",
    "-- Step 2: Update số dòng trong bảng (chỉ dùng bảng mới)\n",
    "\n",
    "declare @sql nvarchar(max)\n",
    "set @sql = ''\n",
    "select @sql = @sql + '\n",
    "INSERT INTO DATA.dbo.TABLE_QUALITY (TABLE_NAME, N_ROW)\n",
    "select ''' + TABLE_NAME + ''', count(1) as N_ROW from DATA.dbo.' + TABLE_NAME + '\n",
    "'\n",
    "from DATA.INFORMATION_SCHEMA.tables\n",
    "where table_name not in (select table_name from data.dbo.table_quality)\n",
    "print @sql\n",
    "exec(@sql)\n",
    "\n",
    "select * from DATA..TABLE_QUALITY\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sửa default template trong SQL\n",
    "\n",
    "- Sửa file `SQLfile.sql` tại đường dẫn sau `C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\ManagementStudio\\SqlWorkbenchProjectItems\\Sql`\n",
    "\n",
    "- Nội dung default script\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "/********************************\n",
    "Script:\t\t\tGiao dịch Ebanking\n",
    "Author:\t\t\tAnhHD3\n",
    "Created date:\t20180701\n",
    "Modifed date:\t20181127\n",
    "========================================\n",
    "Description: Create Data Preparation \n",
    "for datamart\n",
    "========================================\n",
    "Affected tables:\n",
    "\t- [dbo].[POS_ECOMCARD_2017]\n",
    "\n",
    "Steps:\n",
    "\t- Step 1: Declare date\n",
    "\t- Step 2: \n",
    "\t\t- POS transaction\n",
    "\t\t- ATM/CDM transaction\n",
    "*********************************/\n",
    "SELECT TOP 1 * FROM XXX\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bắt đầu têm bảng với DIM\n",
    "\n",
    "- Tên các bảng thường bắt đầu bằng Dim - viết tắt của Dimension\n",
    "\n",
    "## Xóa bảng nếu tồn tại\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "drop table if exists CROSS_SELLING_RESULTS\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tìm kiếm kiểu dữ liệu trong bảng của db\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "-- Kiểm tra thông tin kiểu dữ liệu trong bảng\n",
    "select table_name, column_name, data_type from [learningsql].[INFORMATION_SCHEMA].[columns]\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sử dụng drop và create trong cùng batch\n",
    "\n",
    "- DROP và CREATE không thể chạy cùng trong 1 batch, khi muốn sử dụng phải thêm câu lệnh GO\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "drop table if exists #temp\n",
    "GO\n",
    "\n",
    "create table #temp(abc int)\n",
    "insert into #temp(abc)\n",
    "values (1), (2)\n",
    "GO\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phân biệt định dạng integer\n",
    "\n",
    "- SQL không phân biệt được định dạng numeric & integer ngay lập tức\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "select 7/10  -- Trả kết quả 0\n",
    "\n",
    "--So sánh\n",
    "\n",
    "select 7.0/10 -- Chạy đúng\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VARCHAR vs. NVARCHAR\n",
    "\n",
    "- varchar vs. nvarchar: nvarchar cho phép lưu trữ ký tự Unicode, varchar không cho phép\n",
    "- varchar(n) vs. varchar(max): \n",
    "\n",
    "\n",
    "+--------------------+----------------------------+\n",
    "|     varchar(n)     |        varchar(max)        |\n",
    "+====================+============================+\n",
    "| Tối đa 8000 ký tự  | Tối đa hơn 2 tỷ, khoảng 2G |\n",
    "+--------------------+----------------------------+\n",
    "| Cho phép tạo index | Không cho phép tạo index   |\n",
    "+--------------------+----------------------------+\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "--Varchar(50): Work\n",
    "CREATE TABLE dbo.Employee\n",
    "(id INT identity(1,1)\n",
    "   PRIMARY KEY,\n",
    " Name VARCHAR(50))\n",
    "GO\n",
    "CREATE INDEX IX_EmployeeName \n",
    " ON dbo.Employee(Name)\n",
    "GO\n",
    "\n",
    "--Varchar(max): Not work\n",
    "CREATE TABLE dbo.Employee\n",
    "(id INT identity(1,1)\n",
    "   PRIMARY KEY,\n",
    " Name VARCHAR(Max))\n",
    "GO\n",
    "CREATE INDEX IX_EmployeeName\n",
    " ON dbo.Employee(Name)\n",
    "GO \n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Primary key vs. Unique key\n",
    "\n",
    "\n",
    "+----------+----------------------------+-------------------------------------+\n",
    "| Tiêu chí |        Primary key         |             Unique key              |\n",
    "+==========+============================+=====================================+\n",
    "| NULL     |  Không cho phép null       | Cho phép MỘT giá trị NULL           |\n",
    "+----------+----------------------------+-------------------------------------+\n",
    "| Index    | Default là clustered index | Default là unique non-cluster index |\n",
    "+----------+----------------------------+-------------------------------------+\n",
    "| Limit    | Chỉ có 1 key               | Có thể có nhiều key                 |\n",
    "+----------+----------------------------+-------------------------------------+\n",
    "\n",
    "\n",
    "## EXEC vs. EXEC()\n",
    "\n",
    "- Exec dùng để thực hiện các procedure. VD: `exec sp_pivot`\n",
    "- Exec() dùng để thực hiện dinamic SQL. \n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "exec('Select top 10 * from @table')\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Xem tất cả các user-defined procedure\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "SELECT name, \n",
    "       type\n",
    "  FROM dbo.sysobjects\n",
    " WHERE (type = 'P') and\n",
    " name like 'u%'\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    \n",
    "## Làm việc với link server\n",
    "\n",
    "**Vấn đề**: Cách link server thủ công (GUI) có thể sẽ gặp vấn đề khi cùng lúc làm việc với nhiều server. Ta có thể sử dụng T-SQL để làm việc với link server như sau\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "-- Bước 1: Tạo link server \n",
    "\n",
    "EXEC sp_addlinkedserver     \n",
    "   @server='RBD',   \n",
    "   @srvproduct=N'',  \n",
    "   @provider=N'SQLNCLI',\n",
    "   @datasrc='10.39.200.204'\n",
    "\n",
    "-- Bước 2: Tạo password\n",
    "\n",
    "EXEC sp_addlinkedsrvlogin\n",
    "  @rmtsrvname ='RBD'\n",
    ", @useself = 'FALSE'\n",
    ", @rmtuser = 'bic_user'\n",
    ", @rmtpassword = 'bic_user'\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "-- Kiểm tra tất cả link server\n",
    "sp_helpserver\n",
    "\n",
    "-- Xóa link server RBD\n",
    "sp_dropserver 'RBD', 'droplogins';  \n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Procedure tạo nhiều link server\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "drop procedure if exists u_createlinkserver\n",
    "GO\n",
    "create procedure u_createlinkserver \n",
    "\t@name nvarchar(max),\n",
    "\t@source nvarchar(max),\n",
    "\t@user nvarchar(max),\n",
    "\t@password nvarchar(max)\n",
    "as\n",
    "\n",
    "BEGIN\n",
    "\tEXEC sp_addlinkedserver     \n",
    "\t   @server=@name,   \n",
    "\t   @srvproduct=N'',  \n",
    "       @provider=N'SQLNCLI',\n",
    "\t   @datasrc=@source;\n",
    "   \n",
    "\tEXEC sp_addlinkedsrvlogin\n",
    "\t  @rmtsrvname = @name\n",
    "\t, @useself = 'FALSE'\n",
    "\t, @rmtuser = @user\n",
    "\t, @rmtpassword = @password\n",
    "END \n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ví dụ**:\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "exec u_createlinkserver \n",
    "\t@name='RBD',   \n",
    "    @source='10.39.200.204',\n",
    "\t@user = 'bic_user',\n",
    "\t@password = 'bic_user'\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tìm tất cả các bảng, cột trong Database\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "SELECT 'SERVER_74' as SERVER,\n",
    "\t\t'BICDATA' as DATA_BASE,\n",
    "\t\tlst.name AS Table_Name, \n",
    "        lsc.name AS Column_Name, \n",
    "        lsc.max_length as Max_Length\n",
    "FROM [M74].[BICDATA].[sys].[tables] lst\n",
    "    INNER JOIN [M74].[BICDATA].[sys].[columns] lsc\n",
    "        ON lst.OBJECT_ID=lsc.object_id\n",
    "union \n",
    "SELECT 'SERVER_16' as SERVER,\n",
    "\t   'VPB_WHR2' as DATA_BASE,\n",
    "\t   lst.name AS Table_Name, \n",
    "       lsc.name AS Column_Name, \n",
    "       lsc.max_length as Max_Length\n",
    "FROM [M16].[VPB_WHR2].[sys].[tables] lst\n",
    "    INNER JOIN [M16].[VPB_WHR2].[sys].[columns] lsc\n",
    "        ON lst.OBJECT_ID=lsc.object_id\n",
    "ORDER BY DATA_BASE, lst.name, lsc.name\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chạy file .BAT từ T-SQL\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "sp_configure 'show advanced options', '1'\n",
    "RECONFIGURE\n",
    "sp_configure 'xp_cmdshell', '1' \n",
    "RECONFIGURE\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "EXEC xp_cmdshell 'cmd /c \"F:\\D\\my_file.bat\"'  \n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**Lưu ý**: Cách sử dụng `xp_cmdshell` khắc phục được nhược điểm của `sqlcmd`, cho phép đặt job với file `bat`\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": "",
  "kernelspec": {
   "display_name": "saturn (Python 3)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
