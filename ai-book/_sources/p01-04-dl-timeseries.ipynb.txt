{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chuỗi thời gian"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Giới thiệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khi dự báo với deep learning, ta có thể chia dữ liệu thành các minibatch khác nhau. Với mỗi `sequence_length` là `m`, sẽ lấy `m` điểm thời gian trước đó để làm input dự báo cho thời gian hiện tại "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:23.042151Z",
     "iopub.status.busy": "2025-01-03T08:36:23.041850Z",
     "iopub.status.idle": "2025-01-03T08:36:28.791717Z",
     "shell.execute_reply": "2025-01-03T08:36:28.791022Z",
     "shell.execute_reply.started": "2025-01-03T08:36:23.042129Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-03 08:36:23.679723: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2025-01-03 08:36:23.683757: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2025-01-03 08:36:23.694230: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1735893383.711521     243 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1735893383.716288     243 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-01-03 08:36:23.734746: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2] 3\n",
      "[1, 2, 3] 4\n",
      "[2, 3, 4] 5\n",
      "[3, 4, 5] 6\n",
      "[4, 5, 6] 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-03 08:36:28.636612: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2025-01-03 08:36:28.781746: I tensorflow/core/framework/local_rendezvous.cc:405] Local rendezvous is aborting with status: OUT_OF_RANGE: End of sequence\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from tensorflow import keras\n",
    "int_sequence = np.arange(10)\n",
    "dummy_dataset = keras.utils.timeseries_dataset_from_array(\n",
    "    data=int_sequence[:-3],\n",
    "    targets=int_sequence[3:],\n",
    "    sequence_length=3,\n",
    "    batch_size=2,\n",
    ")\n",
    "for inputs, targets in dummy_dataset:\n",
    "    for i in range(inputs.shape[0]):\n",
    "        print([int(x) for x in inputs[i]], int(targets[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Deep Learning có thể sử dụng để dự báo chuỗi thời gian. Trong chương này, ta sẽ dùng dữ liệu dự báo về thông số thời tiết với dữ liệu từ 2009-2016.\n",
    "\n",
    "[https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip]()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:28.793688Z",
     "iopub.status.busy": "2025-01-03T08:36:28.793158Z",
     "iopub.status.idle": "2025-01-03T08:36:29.052205Z",
     "shell.execute_reply": "2025-01-03T08:36:29.051585Z",
     "shell.execute_reply.started": "2025-01-03T08:36:28.793665Z"
    }
   },
   "outputs": [],
   "source": [
    "import polars as pl\n",
    "from plotnine import * \n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'d:\\\\01-github\\\\ai-book\\\\_source'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:31.220697Z",
     "iopub.status.busy": "2025-01-03T08:36:31.220355Z",
     "iopub.status.idle": "2025-01-03T08:36:31.637882Z",
     "shell.execute_reply": "2025-01-03T08:36:31.637281Z",
     "shell.execute_reply.started": "2025-01-03T08:36:31.220666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 15)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date Time</th><th>p (mbar)</th><th>T (degC)</th><th>Tpot (K)</th><th>Tdew (degC)</th><th>rh (%)</th><th>VPmax (mbar)</th><th>VPact (mbar)</th><th>VPdef (mbar)</th><th>sh (g/kg)</th><th>H2OC (mmol/mol)</th><th>rho (g/m**3)</th><th>wv (m/s)</th><th>max. wv (m/s)</th><th>wd (deg)</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;01.01.2009 00:10:00&quot;</td><td>996.52</td><td>-8.02</td><td>265.4</td><td>-8.9</td><td>93.3</td><td>3.33</td><td>3.11</td><td>0.22</td><td>1.94</td><td>3.12</td><td>1307.75</td><td>1.03</td><td>1.75</td><td>152.3</td></tr><tr><td>&quot;01.01.2009 00:20:00&quot;</td><td>996.57</td><td>-8.41</td><td>265.01</td><td>-9.28</td><td>93.4</td><td>3.23</td><td>3.02</td><td>0.21</td><td>1.89</td><td>3.03</td><td>1309.8</td><td>0.72</td><td>1.5</td><td>136.1</td></tr><tr><td>&quot;01.01.2009 00:30:00&quot;</td><td>996.53</td><td>-8.51</td><td>264.91</td><td>-9.31</td><td>93.9</td><td>3.21</td><td>3.01</td><td>0.2</td><td>1.88</td><td>3.02</td><td>1310.24</td><td>0.19</td><td>0.63</td><td>171.6</td></tr><tr><td>&quot;01.01.2009 00:40:00&quot;</td><td>996.51</td><td>-8.31</td><td>265.12</td><td>-9.07</td><td>94.2</td><td>3.26</td><td>3.07</td><td>0.19</td><td>1.92</td><td>3.08</td><td>1309.19</td><td>0.34</td><td>0.5</td><td>198.0</td></tr><tr><td>&quot;01.01.2009 00:50:00&quot;</td><td>996.51</td><td>-8.27</td><td>265.15</td><td>-9.04</td><td>94.1</td><td>3.27</td><td>3.08</td><td>0.19</td><td>1.92</td><td>3.09</td><td>1309.0</td><td>0.32</td><td>0.63</td><td>214.3</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 15)\n",
       "┌──────────────┬──────────┬──────────┬──────────┬───┬──────────────┬──────────┬─────────┬──────────┐\n",
       "│ Date Time    ┆ p (mbar) ┆ T (degC) ┆ Tpot (K) ┆ … ┆ rho (g/m**3) ┆ wv (m/s) ┆ max. wv ┆ wd (deg) │\n",
       "│ ---          ┆ ---      ┆ ---      ┆ ---      ┆   ┆ ---          ┆ ---      ┆ (m/s)   ┆ ---      │\n",
       "│ str          ┆ f64      ┆ f64      ┆ f64      ┆   ┆ f64          ┆ f64      ┆ ---     ┆ f64      │\n",
       "│              ┆          ┆          ┆          ┆   ┆              ┆          ┆ f64     ┆          │\n",
       "╞══════════════╪══════════╪══════════╪══════════╪═══╪══════════════╪══════════╪═════════╪══════════╡\n",
       "│ 01.01.2009   ┆ 996.52   ┆ -8.02    ┆ 265.4    ┆ … ┆ 1307.75      ┆ 1.03     ┆ 1.75    ┆ 152.3    │\n",
       "│ 00:10:00     ┆          ┆          ┆          ┆   ┆              ┆          ┆         ┆          │\n",
       "│ 01.01.2009   ┆ 996.57   ┆ -8.41    ┆ 265.01   ┆ … ┆ 1309.8       ┆ 0.72     ┆ 1.5     ┆ 136.1    │\n",
       "│ 00:20:00     ┆          ┆          ┆          ┆   ┆              ┆          ┆         ┆          │\n",
       "│ 01.01.2009   ┆ 996.53   ┆ -8.51    ┆ 264.91   ┆ … ┆ 1310.24      ┆ 0.19     ┆ 0.63    ┆ 171.6    │\n",
       "│ 00:30:00     ┆          ┆          ┆          ┆   ┆              ┆          ┆         ┆          │\n",
       "│ 01.01.2009   ┆ 996.51   ┆ -8.31    ┆ 265.12   ┆ … ┆ 1309.19      ┆ 0.34     ┆ 0.5     ┆ 198.0    │\n",
       "│ 00:40:00     ┆          ┆          ┆          ┆   ┆              ┆          ┆         ┆          │\n",
       "│ 01.01.2009   ┆ 996.51   ┆ -8.27    ┆ 265.15   ┆ … ┆ 1309.0       ┆ 0.32     ┆ 0.63    ┆ 214.3    │\n",
       "│ 00:50:00     ┆          ┆          ┆          ┆   ┆              ┆          ┆         ┆          │\n",
       "└──────────────┴──────────┴──────────┴──────────┴───┴──────────────┴──────────┴─────────┴──────────┘"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.read_csv(\"data/climate_2009_2016.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:34.057318Z",
     "iopub.status.busy": "2025-01-03T08:36:34.056989Z",
     "iopub.status.idle": "2025-01-03T08:36:34.062732Z",
     "shell.execute_reply": "2025-01-03T08:36:34.061883Z",
     "shell.execute_reply.started": "2025-01-03T08:36:34.057294Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Date Time',\n",
       " 'p (mbar)',\n",
       " 'T (degC)',\n",
       " 'Tpot (K)',\n",
       " 'Tdew (degC)',\n",
       " 'rh (%)',\n",
       " 'VPmax (mbar)',\n",
       " 'VPact (mbar)',\n",
       " 'VPdef (mbar)',\n",
       " 'sh (g/kg)',\n",
       " 'H2OC (mmol/mol)',\n",
       " 'rho (g/m**3)',\n",
       " 'wv (m/s)',\n",
       " 'max. wv (m/s)',\n",
       " 'wd (deg)']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:37.241448Z",
     "iopub.status.busy": "2025-01-03T08:36:37.241090Z",
     "iopub.status.idle": "2025-01-03T08:36:37.263637Z",
     "shell.execute_reply": "2025-01-03T08:36:37.263028Z",
     "shell.execute_reply.started": "2025-01-03T08:36:37.241423Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>value</th></tr><tr><td>str</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>420451.0</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td></tr><tr><td>&quot;mean&quot;</td><td>9.448567</td></tr><tr><td>&quot;std&quot;</td><td>8.423685</td></tr><tr><td>&quot;min&quot;</td><td>-23.01</td></tr><tr><td>&quot;25%&quot;</td><td>3.36</td></tr><tr><td>&quot;50%&quot;</td><td>9.41</td></tr><tr><td>&quot;75%&quot;</td><td>15.47</td></tr><tr><td>&quot;max&quot;</td><td>37.28</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 2)\n",
       "┌────────────┬──────────┐\n",
       "│ statistic  ┆ value    │\n",
       "│ ---        ┆ ---      │\n",
       "│ str        ┆ f64      │\n",
       "╞════════════╪══════════╡\n",
       "│ count      ┆ 420451.0 │\n",
       "│ null_count ┆ 0.0      │\n",
       "│ mean       ┆ 9.448567 │\n",
       "│ std        ┆ 8.423685 │\n",
       "│ min        ┆ -23.01   │\n",
       "│ 25%        ┆ 3.36     │\n",
       "│ 50%        ┆ 9.41     │\n",
       "│ 75%        ┆ 15.47    │\n",
       "│ max        ┆ 37.28    │\n",
       "└────────────┴──────────┘"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Thống kê nhanh chuỗi thời gian\n",
    "df[:, 2].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:38.530457Z",
     "iopub.status.busy": "2025-01-03T08:36:38.529993Z",
     "iopub.status.idle": "2025-01-03T08:36:38.533750Z",
     "shell.execute_reply": "2025-01-03T08:36:38.532907Z",
     "shell.execute_reply.started": "2025-01-03T08:36:38.530433Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:39.559647Z",
     "iopub.status.busy": "2025-01-03T08:36:39.559179Z",
     "iopub.status.idle": "2025-01-03T08:36:39.910952Z",
     "shell.execute_reply": "2025-01-03T08:36:39.910286Z",
     "shell.execute_reply.started": "2025-01-03T08:36:39.559624Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f1e9c456450>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df[:, 2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khi xây dựng mô hình DL, ta cần chuẩn bị dữ liệu dưới dạng array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:44.012561Z",
     "iopub.status.busy": "2025-01-03T08:36:44.012222Z",
     "iopub.status.idle": "2025-01-03T08:36:44.144503Z",
     "shell.execute_reply": "2025-01-03T08:36:44.143633Z",
     "shell.execute_reply.started": "2025-01-03T08:36:44.012536Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['\"Date Time\"', '\"p (mbar)\"', '\"T (degC)\"', '\"Tpot (K)\"', '\"Tdew (degC)\"', '\"rh (%)\"', '\"VPmax (mbar)\"', '\"VPact (mbar)\"', '\"VPdef (mbar)\"', '\"sh (g/kg)\"', '\"H2OC (mmol/mol)\"', '\"rho (g/m**3)\"', '\"wv (m/s)\"', '\"max. wv (m/s)\"', '\"wd (deg)\"']\n",
      "420451\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "fname = os.path.join(\"data/climate_2009_2016.csv\")\n",
    "with open(fname) as f:\n",
    "    data = f.read()\n",
    "lines = data.split(\"\\n\")\n",
    "# Tên các cột\n",
    "header = lines[0].split(\",\")\n",
    "# Giá trị của các biến (từ dòng số 1)\n",
    "lines = lines[1:]\n",
    "print(header)\n",
    "print(len(lines))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Phân tách giá trị của dữ liệu dựa vào dựa vào `temperature` và các biến đầu vào"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:45.420951Z",
     "iopub.status.busy": "2025-01-03T08:36:45.420580Z",
     "iopub.status.idle": "2025-01-03T08:36:47.186588Z",
     "shell.execute_reply": "2025-01-03T08:36:47.185955Z",
     "shell.execute_reply.started": "2025-01-03T08:36:45.420906Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "temperature = np.zeros((len(lines),))\n",
    "raw_data = np.zeros((len(lines), len(header) - 1))\n",
    "for i, line in enumerate(lines):\n",
    "    values = [float(x) for x in line.split(\",\")[1:]]\n",
    "    temperature[i] = values[1]\n",
    "    raw_data[i, :] = values[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:47.188228Z",
     "iopub.status.busy": "2025-01-03T08:36:47.187883Z",
     "iopub.status.idle": "2025-01-03T08:36:47.193432Z",
     "shell.execute_reply": "2025-01-03T08:36:47.192286Z",
     "shell.execute_reply.started": "2025-01-03T08:36:47.188201Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-8.02, -8.41, -8.51, ..., -3.16, -4.23, -4.82])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:47.195353Z",
     "iopub.status.busy": "2025-01-03T08:36:47.194693Z",
     "iopub.status.idle": "2025-01-03T08:36:47.201115Z",
     "shell.execute_reply": "2025-01-03T08:36:47.200527Z",
     "shell.execute_reply.started": "2025-01-03T08:36:47.195332Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 9.9652e+02, -8.0200e+00,  2.6540e+02, ...,  1.0300e+00,\n",
       "         1.7500e+00,  1.5230e+02],\n",
       "       [ 9.9657e+02, -8.4100e+00,  2.6501e+02, ...,  7.2000e-01,\n",
       "         1.5000e+00,  1.3610e+02],\n",
       "       [ 9.9653e+02, -8.5100e+00,  2.6491e+02, ...,  1.9000e-01,\n",
       "         6.3000e-01,  1.7160e+02],\n",
       "       ...,\n",
       "       [ 9.9982e+02, -3.1600e+00,  2.7001e+02, ...,  1.0800e+00,\n",
       "         2.0000e+00,  2.1520e+02],\n",
       "       [ 9.9981e+02, -4.2300e+00,  2.6894e+02, ...,  1.4900e+00,\n",
       "         2.1600e+00,  2.2580e+02],\n",
       "       [ 9.9982e+02, -4.8200e+00,  2.6836e+02, ...,  1.2300e+00,\n",
       "         1.9600e+00,  1.8490e+02]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Phân chia train & test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:48.027616Z",
     "iopub.status.busy": "2025-01-03T08:36:48.027145Z",
     "iopub.status.idle": "2025-01-03T08:36:48.031157Z",
     "shell.execute_reply": "2025-01-03T08:36:48.030420Z",
     "shell.execute_reply.started": "2025-01-03T08:36:48.027592Z"
    }
   },
   "outputs": [],
   "source": [
    "num_train_samples = int(0.5 * len(raw_data))\n",
    "num_val_samples = int(0.25 * len(raw_data))\n",
    "num_test_samples = len(raw_data) - num_train_samples - num_val_samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:48.524547Z",
     "iopub.status.busy": "2025-01-03T08:36:48.524095Z",
     "iopub.status.idle": "2025-01-03T08:36:48.572571Z",
     "shell.execute_reply": "2025-01-03T08:36:48.571925Z",
     "shell.execute_reply.started": "2025-01-03T08:36:48.524525Z"
    }
   },
   "outputs": [],
   "source": [
    "# Chuẩn hóa dữ liệu\n",
    "mean = raw_data[:num_train_samples].mean(axis=0)\n",
    "raw_data -= mean\n",
    "std = raw_data[:num_train_samples].std(axis=0)\n",
    "raw_data /= std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với tập dữ liệu về nhiệt độ, mục tiêu dự báo nhiệt độ theo mỗi giờ. Dữ liệu gốc được ghi nhận mỗi 10 phút 1 lần. Do đó, ta chỉ cần lấy sample của mỗi giờ trong dữ liệu dự báo.\n",
    "\n",
    "- `sampling_rate = 6`: Với mỗi khung giờ lấy 1 quan sát\n",
    "- `sequence_length = 120`: Sử dụng 120 quan sát trước để dự báo (5 ngày dữ liệu = 24 * 5)\n",
    "- `delay = sampling_rate * (sequence_length + 24 - 1)`: Dự báo 24h sau khi sequence kết thúc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:49.871795Z",
     "iopub.status.busy": "2025-01-03T08:36:49.871473Z",
     "iopub.status.idle": "2025-01-03T08:36:49.875418Z",
     "shell.execute_reply": "2025-01-03T08:36:49.874550Z",
     "shell.execute_reply.started": "2025-01-03T08:36:49.871773Z"
    }
   },
   "outputs": [],
   "source": [
    "sampling_rate = 6\n",
    "sequence_length = 120\n",
    "delay = sampling_rate * (sequence_length + 24 - 1)\n",
    "batch_size = 256"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:51.217642Z",
     "iopub.status.busy": "2025-01-03T08:36:51.217312Z",
     "iopub.status.idle": "2025-01-03T08:36:51.474848Z",
     "shell.execute_reply": "2025-01-03T08:36:51.474237Z",
     "shell.execute_reply.started": "2025-01-03T08:36:51.217621Z"
    }
   },
   "outputs": [],
   "source": [
    "# Train data\n",
    "train_dataset = keras.utils.timeseries_dataset_from_array(\n",
    "    raw_data[:-delay],\n",
    "    targets=temperature[delay:],\n",
    "    sampling_rate=sampling_rate,\n",
    "    sequence_length=sequence_length,\n",
    "    shuffle=True,\n",
    "    batch_size=batch_size,\n",
    "    start_index=0,\n",
    "    end_index=num_train_samples)\n",
    "val_dataset = keras.utils.timeseries_dataset_from_array(\n",
    "    raw_data[:-delay],\n",
    "    targets=temperature[delay:],\n",
    "    sampling_rate=sampling_rate,\n",
    "    sequence_length=sequence_length,\n",
    "    shuffle=True,\n",
    "    batch_size=batch_size,\n",
    "    start_index=num_train_samples,\n",
    "    end_index=num_train_samples + num_val_samples)\n",
    "test_dataset = keras.utils.timeseries_dataset_from_array(\n",
    "    raw_data[:-delay],\n",
    "    targets=temperature[delay:],\n",
    "    sampling_rate=sampling_rate,\n",
    "    sequence_length=sequence_length,\n",
    "    shuffle=True,\n",
    "    batch_size=batch_size,\n",
    "    start_index=num_train_samples + num_val_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:53.692747Z",
     "iopub.status.busy": "2025-01-03T08:36:53.692424Z",
     "iopub.status.idle": "2025-01-03T08:36:53.697942Z",
     "shell.execute_reply": "2025-01-03T08:36:53.696984Z",
     "shell.execute_reply.started": "2025-01-03T08:36:53.692725Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<_BatchDataset element_spec=(TensorSpec(shape=(None, None, 14), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Xây dựng mô hình đơn giản"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:56.220820Z",
     "iopub.status.busy": "2025-01-03T08:36:56.220488Z",
     "iopub.status.idle": "2025-01-03T08:36:56.251614Z",
     "shell.execute_reply": "2025-01-03T08:36:56.250971Z",
     "shell.execute_reply.started": "2025-01-03T08:36:56.220791Z"
    }
   },
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "inputs = keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
    "\n",
    "x = layers.Flatten()(inputs)\n",
    "x = layers.Dense(16, activation=\"relu\")(x)\n",
    "\n",
    "outputs = layers.Dense(1)(x)\n",
    "model = keras.Model(inputs, outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:58.059772Z",
     "iopub.status.busy": "2025-01-03T08:36:58.059449Z",
     "iopub.status.idle": "2025-01-03T08:36:58.071921Z",
     "shell.execute_reply": "2025-01-03T08:36:58.071253Z",
     "shell.execute_reply.started": "2025-01-03T08:36:58.059750Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "callbacks = [\n",
    "    keras.callbacks.ModelCheckpoint(\"jena_dense.keras\",\n",
    "    save_best_only=True)\n",
    "]\n",
    "\n",
    "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T08:36:59.217984Z",
     "iopub.status.busy": "2025-01-03T08:36:59.217496Z",
     "iopub.status.idle": "2025-01-03T08:37:00.840245Z",
     "shell.execute_reply": "2025-01-03T08:37:00.838782Z",
     "shell.execute_reply.started": "2025-01-03T08:36:59.217961Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-03 08:37:00.050278: W tensorflow/core/framework/op_kernel.cc:1841] OP_REQUIRES failed at reshape_op.h:65 : INVALID_ARGUMENT: Only one input size may be -1, not both 0 and 1\n",
      "2025-01-03 08:37:00.050357: I tensorflow/core/framework/local_rendezvous.cc:405] Local rendezvous is aborting with status: INVALID_ARGUMENT: Only one input size may be -1, not both 0 and 1\n",
      "\t [[{{function_node __inference_one_step_on_data_1179}}{{node functional_1/flatten_1/Reshape}}]]\n"
     ]
    },
    {
     "ename": "InvalidArgumentError",
     "evalue": "Graph execution error:\n\nDetected at node functional_1/flatten_1/Reshape defined at (most recent call last):\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/runpy.py\", line 198, in _run_module_as_main\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/runpy.py\", line 88, in _run_code\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel_launcher.py\", line 18, in <module>\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/traitlets/config/application.py\", line 1075, in launch_instance\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelapp.py\", line 739, in start\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/base_events.py\", line 608, in run_forever\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/base_events.py\", line 1936, in _run_once\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/events.py\", line 84, in _run\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 545, in dispatch_queue\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 534, in process_one\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 437, in dispatch_shell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/ipkernel.py\", line 362, in execute_request\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 778, in execute_request\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/ipkernel.py\", line 449, in do_execute\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/zmqshell.py\", line 549, in run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3075, in run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3130, in _run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/async_helpers.py\", line 128, in _pseudo_sync_runner\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3334, in run_cell_async\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3517, in run_ast_nodes\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3577, in run_code\n\n  File \"/tmp/ipykernel_243/2161284880.py\", line 1, in <module>\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 368, in fit\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 216, in function\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 129, in multi_step_on_iterator\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 110, in one_step_on_data\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 56, in train_step\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/layer.py\", line 899, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/operation.py\", line 46, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 156, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/models/functional.py\", line 182, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/function.py\", line 171, in _run_through_graph\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/models/functional.py\", line 632, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/layer.py\", line 899, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/operation.py\", line 46, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 156, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/reshaping/flatten.py\", line 54, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/numpy.py\", line 4761, in reshape\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/numpy.py\", line 1885, in reshape\n\nOnly one input size may be -1, not both 0 and 1\n\t [[{{node functional_1/flatten_1/Reshape}}]] [Op:__inference_multi_step_on_iterator_1212]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_dataset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_dataset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
      "File \u001b[0;32m/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/tensorflow/python/eager/execute.py:53\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     52\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 53\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[1;32m     54\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     56\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node functional_1/flatten_1/Reshape defined at (most recent call last):\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/runpy.py\", line 198, in _run_module_as_main\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/runpy.py\", line 88, in _run_code\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel_launcher.py\", line 18, in <module>\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/traitlets/config/application.py\", line 1075, in launch_instance\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelapp.py\", line 739, in start\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/base_events.py\", line 608, in run_forever\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/base_events.py\", line 1936, in _run_once\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/asyncio/events.py\", line 84, in _run\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 545, in dispatch_queue\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 534, in process_one\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 437, in dispatch_shell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/ipkernel.py\", line 362, in execute_request\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/kernelbase.py\", line 778, in execute_request\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/ipkernel.py\", line 449, in do_execute\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/ipykernel/zmqshell.py\", line 549, in run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3075, in run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3130, in _run_cell\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/async_helpers.py\", line 128, in _pseudo_sync_runner\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3334, in run_cell_async\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3517, in run_ast_nodes\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3577, in run_code\n\n  File \"/tmp/ipykernel_243/2161284880.py\", line 1, in <module>\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 368, in fit\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 216, in function\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 129, in multi_step_on_iterator\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 110, in one_step_on_data\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/trainer.py\", line 56, in train_step\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/layer.py\", line 899, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/operation.py\", line 46, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 156, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/models/functional.py\", line 182, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/function.py\", line 171, in _run_through_graph\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/models/functional.py\", line 632, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/layer.py\", line 899, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/operation.py\", line 46, in __call__\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 156, in error_handler\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/layers/reshaping/flatten.py\", line 54, in call\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/ops/numpy.py\", line 4761, in reshape\n\n  File \"/opt/saturncloud/envs/saturn/lib/python3.11/site-packages/keras/src/backend/tensorflow/numpy.py\", line 1885, in reshape\n\nOnly one input size may be -1, not both 0 and 1\n\t [[{{node functional_1/flatten_1/Reshape}}]] [Op:__inference_multi_step_on_iterator_1212]"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_dataset,\n",
    "    epochs=10,\n",
    "    validation_data=val_dataset,\n",
    "    callbacks=callbacks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.load_model(\"jena_dense.keras\")\n",
    "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "saturn (Python 3)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
