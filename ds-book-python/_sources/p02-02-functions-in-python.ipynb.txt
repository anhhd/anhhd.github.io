{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Viết hàm trong Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Giới thiệu về hàm\n",
    "\n",
    "Python cho phép sử dụng hàm linh hoạt với các tham số và trả ra kết quả định sẵn. Có 1 số lưu ý như sau:\n",
    "\n",
    "- Hàm bắt đầu với `def`\n",
    "- Các tham số mặc định được sử dụng tương tự như R. VD `def plus(a, b = 2)`\n",
    "- Trong hàm cho phép ghi chú document của hàm trong ba dấu ngoặc kép, được gọi là `docs string`\n",
    "- Các tham số chưa biết định dạng tuple (tương ứng với `...` trong R) được sử dụng với argument `*args` (argument)\n",
    "- Các tham số với keyword được sử dụng với argument `**kargs` (keyword argument)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus_1(a, b = 2):\n",
    "    \"\"\"Trả ra kết quả hàm tổng\"\"\"\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus_1(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mSignature:\u001b[39m plus_1(a, b=\u001b[32m2\u001b[39m)\n",
      "\u001b[31mDocstring:\u001b[39m Trả ra kết quả hàm tổng\n",
      "\u001b[31mFile:\u001b[39m      c:\\users\\admin\\appdata\\local\\temp\\ipykernel_25336\\2568156839.py\n",
      "\u001b[31mType:\u001b[39m      function"
     ]
    }
   ],
   "source": [
    "?plus_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus_2(*args):\n",
    "    import numpy as np\n",
    "    return np.sum(args)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(12)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus_2(3,4,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các lưu ý với hàm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python các thể tự xác định loại dữ liệu cho đầu vào và đầu ra của hàm. Tuy nhiên, ta nên xác định cấu trúc dữ liệu ngay trong hàm để có thêm thông tin cho người dùng (hint). Việc bổ sung thông tin là không bắt buộc cũng như không ảnh hưởng đến hàm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_sum(a: int, b:int) -> int:\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hàm theo đúng chuẩn tắc\n",
    "f_sum(7, 8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hàm không theo chuẩn tắc\n",
    "f_sum(7.1, 7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *args và **kwargs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các tham số của `*args` và `**kwargs` thường xuyên được sử dụng trong hàm để có thể truyền các tham số chưa xác định trước.\n",
    "\n",
    "- `*args`: Được sử dụng để thu thập các tham số dưới dạng tuple\n",
    "- `**kwargs`: Được sử dụng để thu thập các tham số dưới dạng dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_print(*args, **kwargs):\n",
    "    print(args)\n",
    "    print(kwargs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 'apple')\n",
      "{'a': 6, 'b': 8, 'list': [1, 2, 3]}\n"
     ]
    }
   ],
   "source": [
    "f_print(1, 4, 'apple', a = 6, b = 8, list = [1, 2, 3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Higher order functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các hàm thuộc nhóm này có 1 trong các đặc điểm sau:\n",
    "\n",
    "- Nhận một hàm khác làm input đầu vào: như `map`, `filter`, `reduce`\n",
    "- Trả về kết quả là một hàm khác - nhóm hàm `nested` và `decorator`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### map, filter, reduce"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25]\n"
     ]
    }
   ],
   "source": [
    "# Nhóm hàm map\n",
    "def square(x):\n",
    "    return x * x\n",
    "\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "sqr_numbers = map(square, numbers)\n",
    "print(list(sqr_numbers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4]\n"
     ]
    }
   ],
   "source": [
    "# Nhóm hàm filter\n",
    "def is_even(x):\n",
    "    return x % 2 == 0\n",
    "\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "even_numbers = filter(is_even, numbers)\n",
    "print(list(even_numbers)) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# Nhóm hàm reduce\n",
    "from functools import reduce\n",
    "\n",
    "def add(x, y):\n",
    "    return x + y\n",
    "\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "total = reduce(add, numbers)\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Nested function - hàm lồng"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với mỗi hàm, ta sẽ có 3 cấu phần chính:\n",
    "\n",
    "- Input - tham số đầu vào\n",
    "- Output - kết quả đầu ra\n",
    "\n",
    "Các input và output này có thể là các đối tượng cụ thể như dataframe, số, ... nhưng cũng có thể là một hàm số khác nhau.\n",
    "\n",
    "Với 2 hàm `f(x)` và `g(y)` với `f(g)` có thể có các trường hợp sau:\n",
    "\n",
    "Với input đầu vào:\n",
    "\n",
    "- g (hàm bên trong) sử dụng x là input đầu vào\n",
    "- g (hàm bên trong) là 1 tham số đầu vào cho f\n",
    "\n",
    "Với output đầu ra\n",
    "\n",
    "- Trả ra giá trị\n",
    "- Trả ra hàm số"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Trường hợp 1**: Hàm bên trong sử dụng tham số hàm bên ngoài là đầu vào"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trường hợp 1: g dùng x là đầu vào\n",
    "def outer(x):\n",
    "    def inner(y):\n",
    "        return x + y\n",
    "    return inner # Kết quả trả ra là một hàm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tạo hàm mới - gọi là add_five\n",
    "add_five = outer(5)\n",
    "add_five(11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Trường hợp 2**: Sử dụng 1 hàm là tham số đầu vào cho một hàm khác"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hai hàm đầu tiên\n",
    "def add(x, y):\n",
    "    return x + y\n",
    "\n",
    "def multiply(x, y):\n",
    "    return x * y\n",
    "\n",
    "# Ham sử dụng hàm khác làm đầu vào\n",
    "def f_calculate(func, a, b):\n",
    "    return func(a, b)\n",
    "\n",
    "f_calculate(add, 5, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_calculate(multiply, 5, 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decorator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Decorator là phương thức cho phép chỉnh sửa cách thức hoạt động của một hàm hoặc một lớp (class) mà không ảnh hưởng đến mã nguồn của hàm đó. Decorator sử dụng với cú pháp `@decorator_name`.\n",
    "\n",
    "Trước khi đi vào cú pháp chính tắc của decorator với `@`, ta xem xét hàm sau:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'duc anh'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hàm 1 - trả tên\n",
    "def my_name(name):\n",
    "    return name\n",
    "\n",
    "my_name('duc anh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hàm 2 - convert upper\n",
    "def convert_upper(f):\n",
    "    print(\"We are going to convert to upper\")\n",
    "    def wrapper(*args, **kwargs):\n",
    "        print(\"wrap\")\n",
    "        x = f(*args, **kwargs)\n",
    "        return x.upper()\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We are going to convert to upper\n",
      "wrap\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'DUC ANH'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hàm 3 - Tạo ra từ 2 hàm trên\n",
    "name = convert_upper(my_name)\n",
    "name('duc anh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trong ví dụ trên, thứ tự triển khai như sau:\n",
    "\n",
    "- Bước 1: Tạo hàm 1 trả ra text `my_name`\n",
    "- Bước 2: Tạo hàm 2 là hàm dạng decorator với input là hàm 1 `convert_upper(f)`\n",
    "- Bước 3: Tạm hàm mới là kết quả khi sử dụng hai hàm trên: `name = convert_upper(my_name)`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cách viết trên có thể đơn giản hóa thông qua sử dụng decorator như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We are going to convert to upper\n",
      "wrap\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'DUC ANH'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@convert_upper\n",
    "def my_name(name):\n",
    "    return name\n",
    "\n",
    "my_name('duc anh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--- "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Decorator` thường được dùng khi không muốn viết 1 hàm mới nhưng vẫn đảm bảo các chức năng mới sau khi được điều chỉnh. \n",
    "\n",
    "Ta xem ví dụ sau:\n",
    "\n",
    "- Tạo hàm đơn giản `divide` cho phép tính $\\frac{a}{b}$\n",
    "- Bổ sung thêm cảnh báo và bỏ qua nếu $b=0$ với decorator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def divide(a: float, b: float) -> float:\n",
    "    return a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "divide(7, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bổ sung decorator\n",
    "def smart_divide(func):\n",
    "    def inner(a, b):\n",
    "        print(f\"Divide {a} by {b}\")\n",
    "        if b == 0:\n",
    "            print(\"b = 0, cannot divide\")\n",
    "            return\n",
    "        return func(a, b)\n",
    "    return inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "@smart_divide\n",
    "def divide(a, b):\n",
    "    return a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Divide 7 by 0\n",
      "b = 0, cannot divide\n"
     ]
    }
   ],
   "source": [
    "divide(7, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Divide 7 by 8\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.875"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "divide(7, 8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Chain decorators**: Các decorator có thể dùng liên tục và nối nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hàm đầu tiên\n",
    "def my_name(x: str):\n",
    "    print(\"My names is: {x}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tạo thêm star\n",
    "def star(func):\n",
    "    def inner(*args, **kwargs):\n",
    "        print(\"*\" * 20)\n",
    "        func(*args, **kwargs)\n",
    "        print(\"*\" * 20)\n",
    "    return inner\n",
    "\n",
    "# Tạo thêm $\n",
    "def dollar(func):\n",
    "    def inner(*args, **kwargs):\n",
    "        print(\"$\" * 20)\n",
    "        func(*args, **kwargs)\n",
    "        print(\"$\" * 20)\n",
    "    return inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "@star\n",
    "@dollar\n",
    "def my_name(x):\n",
    "    print(f\"My names is: {x}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "********************\n",
      "$$$$$$$$$$$$$$$$$$$$\n",
      "My names is: duc anh\n",
      "$$$$$$$$$$$$$$$$$$$$\n",
      "********************\n"
     ]
    }
   ],
   "source": [
    "my_name(\"duc anh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "::: {tip}\n",
    "\n",
    "**Lưu ý**:\n",
    "\n",
    "`Decorator` thương được dùng nhiều trong các trường hợp sau:\n",
    "\n",
    "- Tách phần phụ trợ ra khỏi logic chính. VD - Viết log\n",
    "- Tái sử dụng logic\n",
    "- Thay đổi chức năng mà không cần phải thay đổi code gốc.\n",
    "\n",
    ":::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ví dụ viết log\n",
    "def logger(func):\n",
    "    def inner(*args, **kwargs):\n",
    "        print(f\"Step: Calling {func.__name__}\")\n",
    "        print(\"*\" * 20)\n",
    "        func(*args, **kwargs)\n",
    "    return inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "@logger\n",
    "def f_hello(x):\n",
    "    print(f\"Hello {x}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step: Calling f_hello\n",
      "********************\n",
      "Hello Duc Anh\n"
     ]
    }
   ],
   "source": [
    "f_hello(\"Duc Anh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### yield"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khác với `return` sẽ chỉ trả ra kết quả trong hàm, `yield` cho phép trả ra nhiều kết quả. Xem ví dụ đươi đây"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simple_generator():\n",
    "    yield 'apple'\n",
    "    yield 'store'\n",
    "result = simple_generator()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "store\n"
     ]
    }
   ],
   "source": [
    "for i in result:\n",
    "    print(i)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
